// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package repository

import (
	"github.com/google/wire"
	"sync"
)

// Injectors from repository_container.go:

func initializeContainer() (*Container, error) {
	settingRepository, err := ProvideSettingRepository()
	if err != nil {
		return nil, err
	}
	userRepository, err := ProvideUserRepository()
	if err != nil {
		return nil, err
	}
	container := &Container{
		SettingRepository: settingRepository,
		UserRepository:    userRepository,
	}
	return container, nil
}

// repository_container.go:

// Container contains all the repositories of the api.
// If you create a new repository, be sure to add it in the Container and add its provider to the repositoryProviderSet
type Container struct {
	SettingRepository *SettingRepository
	UserRepository    *UserRepository
}

var repositoryProviderSet = wire.NewSet(wire.Struct(new(Container), "*"), ProvideSettingRepository,
	ProvideUserRepository,
)

var containerOnce sync.Once

var containerInstance *Container

// GetContainer returns always the same Container using a thread-safe singleton
func GetContainer() (*Container, error) {
	var err error = nil
	containerOnce.Do(func() {
		containerInstance, err = initializeContainer()
	})
	if err != nil {
		return nil, err
	}

	return containerInstance, nil
}
